{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "name_prefix": {
            "defaultValue": "name",
            "type": "string"
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "iotHubName": "[concat(parameters('name_prefix'),'iot')]",
        "namespaceName": "[concat(parameters('name_prefix'),'ns')]",
        "rootKeyName": "RootManageSharedAccessKey",
        "eventHubName": "TemperatureAlerts",
        "readwritePolicyName": "readwrite",
        "defaultConsumerGroupName": "$Default",
        "storageAccountName": "[concat(parameters('name_prefix'),'storage')]",
        "streamAnalyticsJobName": "[concat(parameters('name_prefix'),'job')]",
        "planName": "[concat(parameters('name_prefix'),'plan')]",
        "webAppName": "[concat(parameters('name_prefix'),'web')]",
        "webAppConfigName": "web",
        "webAppUrl": "[concat(variables('webAppName'),'.azurewebsites.net')]"
    },
    "resources": [
        {
            "comments": "Provision the IoT Hub",
            "type": "Microsoft.Devices/IotHubs",
            "apiVersion": "2016-02-03",
            "name": "[variables('iotHubName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "S1",
                "tier": "Standard",
                "capacity": 1
            },
            "tags": {},
            "properties": {},
            "dependsOn": []
        },
        {
            "comments": "Provision the Event Hub Namespace",
            "type": "Microsoft.EventHub/namespaces",
            "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 1
            },
            "name": "[variables('namespaceName')]",
            "apiVersion": "2017-04-01",
            "location": "[variables('location')]",
            "properties": {
                "isAutoInflateEnabled": true,
                "maximumThroughputUnits": 20,
                "provisioningState": "Succeeded",
                "metricId": "[concat(subscription().subscriptionId, ':', variables('namespaceName'))]",
                "serviceBusEndpoint": "[concat('https://', variables('namespaceName'),'.servicebus.windows.net:443/')]"
            },
            "dependsOn": []
        },
        {
            "comments": "Provision the Event Hub Namespace Authorization Rules",
            "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
            "name": "[concat(variables('namespaceName'), '/', variables('rootKeyName'))]",
            "apiVersion": "2017-04-01",
            "location": "[variables('location')]",
            "scale": null,
            "properties": {
                "rights": [
                    "Listen",
                    "Manage",
                    "Send"
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('namespaceName'))]"
            ]
        },
        {
            "comments": "Provision the TemperatureAlerts event hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "name": "[concat(variables('namespaceName'), '/', variables('eventHubName'))]",
            "apiVersion": "2017-04-01",
            "location": "[variables('location')]",
            "scale": null,
            "properties": {
                "messageRetentionInDays": 1,
                "partitionCount": 2,
                "status": "Active",
                "partitionIds": [
                    "0",
                    "1"
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('namespaceName'))]"
            ]
        },
        {
            "comments": "Provision the 'readwrite' Shared Access Policy.",
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
            "name": "[concat(variables('namespaceName'), '/', variables('eventHubName'), '/', variables('readwritePolicyName'))]",
            "apiVersion": "2017-04-01",
            "location": "West US",
            "scale": null,
            "properties": {
                "rights": [
                    "Listen",
                    "Send"
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('namespaceName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('namespaceName'), variables('eventHubName'))]"
            ]
        },
        {
            "comments": "Provision the $Default consumer group",
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "name": "[concat(variables('namespaceName'), '/', variables('eventHubName'), '/', variables('defaultConsumerGroupName'))]",
            "apiVersion": "2017-04-01",
            "location": "[variables('location')]",
            "scale": null,
            "properties": {},
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', variables('namespaceName'))]",
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('namespaceName'), variables('eventHubName'))]"
            ]
        },
        {
            "comments": "Provision the Storage Account",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2017-06-01",
            "kind": "Storage",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {},
            "dependsOn": []
        },
        {
            "comments": "Provision the App Services Plan.",
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "name": "S1"
            },
            "kind": "app",
            "name": "[variables('planName')]",
            "apiVersion": "2016-09-01",
            "location": "[variables('location')]",
            "properties": {
                "name": "[variables('planName')]"
            },
            "dependsOn": []
        },
        {
            "comments": "Provision the Web App.",
            "type": "Microsoft.Web/sites",
            "kind": "app",
            "name": "[variables('webAppName')]",
            "apiVersion": "2016-08-01",
            "location": "[variables('location')]",
            "properties": {
                "enabled": true,
                "hostNameSslStates": [
                    {
                        "name": "[concat(variables('webAppName'),'.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Standard"
                    },
                    {
                        "name": "[concat(variables('webAppName'),'.scm.azurewebsites.net')]",
                        "sslState": "Disabled",
                        "hostType": "Repository"
                    }
                ],
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('planName'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('planName'))]"
            ]
        }
    ]
}